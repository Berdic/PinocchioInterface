<Controls:MetroWindow x:Class="PinocchioInterface.Windows.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:PinocchioInterface"
        xmlns:converters ="clr-namespace:PinocchioInterface.Converters"
        xmlns:validators ="clr-namespace:PinocchioInterface.Validators"
        xmlns:viewmodel="clr-namespace:PinocchioInterface.ViewModel"
        xmlns:Helix ="clr-namespace:HelixToolkit.Wpf;assembly=HelixToolkit.Wpf"
        xmlns:classes ="clr-namespace:PinocchioInterface.Classes"
        xmlns:controls="clr-namespace:PinocchioInterface.Controls"
        mc:Ignorable="d"
        xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
        xmlns:icons="http://metro.mahapps.com/winfx/xaml/iconpacks"
        Title="Pinocchio GUI" 
        Height="720"
        Width="1280" 
        SaveWindowPosition="True" 
        WindowStartupLocation="CenterScreen"
        GlowBrush="Black">
    <Window.DataContext>
        <viewmodel:MainWindowViewModel/>
    </Window.DataContext>
    <Window.Resources>
        <converters:EnumBooleanConverter x:Key="EnumBooleanConverter"/>
    </Window.Resources>
    <Grid>

        <Grid>
            <Grid.Style>
                <Style TargetType="Grid">
                    <Setter Property="IsEnabled" Value="True"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding ElementName=PbControl, Path=Visibility}" Value="Visible">
                            <Setter Property="IsEnabled" Value="False"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
            <Grid.RowDefinitions>
                <RowDefinition Height="1*"/>
                <RowDefinition Height="10*"/>
                <RowDefinition Height="1.5*"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1*"/>
                <ColumnDefinition Width="3*"/>
                <ColumnDefinition Width="1*"/>
            </Grid.ColumnDefinitions>

            <Label Grid.Column="1" Content="{Binding RiggingProcessStatus, Mode=TwoWay}" />
            <StackPanel Margin="0 5 0 0" VerticalAlignment="Center" >
                <!--<StackPanel Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Center">-->

                <DockPanel>
                    <Label  Content="Choose model:" DockPanel.Dock="Left"/>

                    <Button DockPanel.Dock="Right" Width="30" HorizontalAlignment="Right" x:Name="btnBrowse"  Command="{Binding BrowseCommand}" Background="Transparent">
                        <!--Style="{DynamicResource MetroCircleButtonStyle}"-->
                        <Rectangle Width="20"  Height="15">
                            <Rectangle.Fill>
                                <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_folder_open}" />
                            </Rectangle.Fill>
                        </Rectangle>
                    </Button>

                    <TextBox  x:Name="tbModelPath" HorizontalAlignment="Stretch" KeyUp="tbModelPath_KeyUp" Margin="0 0 5 0">
                        <TextBox.Text>
                            <Binding Path="ModelPath" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                <Binding.ValidationRules>
                                    <validators:FileExistsValidator/>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>
                </DockPanel>

            </StackPanel>
            <StackPanel Grid.Column="2" Grid.Row="1" Grid.RowSpan="2">
                <GroupBox  Header="Transformation">
                    <GroupBox.Style>
                        <Style TargetType="GroupBox" BasedOn="{StaticResource MetroGroupBox}" >
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=lbModels, Path=SelectedIndex}" Value="-1">
                                    <Setter Property="IsEnabled" Value="False"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </GroupBox.Style>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="13*"/>
                            <ColumnDefinition Width="363*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="1*"/>
                            <RowDefinition Height="1*"/>
                            <RowDefinition Height="1*"/>
                            <RowDefinition Height="1*"/>
                            <RowDefinition Height="1*"/>
                            <RowDefinition Height="1*"/>
                        </Grid.RowDefinitions>
                        <Label Grid.Row="0" Content="Rotation (degrees):" FontSize="12" FontWeight="Bold" Grid.ColumnSpan="2"></Label>
                        <StackPanel VerticalAlignment="Top" Grid.Row="1"  Orientation="Horizontal" Grid.ColumnSpan="2">
                            <Label FontSize="10" Content="X axis:"/>
                            <Slider  HorizontalAlignment="Center"  Margin="0 0 5 0" Maximum="359" Minimum="0" Width="160" Value="{Binding ElementName=lbModels, Path=SelectedItem.XRot, Mode=TwoWay}"/>
                            <TextBox Width="30" x:Name="tbXrot">
                                <TextBox.Text>
                                    <Binding ElementName="lbModels" Path="SelectedItem.XRot" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                        <Binding.ValidationRules>
                                            <validators:DegreesValidator/>
                                        </Binding.ValidationRules>
                                    </Binding>
                                </TextBox.Text>
                            </TextBox>
                        </StackPanel>
                        <StackPanel  VerticalAlignment="Top" Grid.Row="2"   Orientation="Horizontal" Grid.ColumnSpan="2">
                            <Label FontSize="10" Content="Y axis:"/>
                            <Slider Maximum="359" Margin="0 0 5 0" Minimum="0" Width="160" Value="{Binding ElementName=lbModels, Path=SelectedItem.YRot, Mode=TwoWay}"/>
                            <TextBox Width="30" x:Name="tbYrot">
                                <TextBox.Text>
                                    <Binding ElementName="lbModels" Path="SelectedItem.YRot" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                        <Binding.ValidationRules>
                                            <validators:DegreesValidator/>
                                        </Binding.ValidationRules>
                                    </Binding>
                                </TextBox.Text>
                            </TextBox>
                        </StackPanel>
                        <StackPanel VerticalAlignment="Top" Grid.Row="3"    Orientation="Horizontal" Grid.ColumnSpan="2">
                            <Label  FontSize="10" Content="Z axis:" />
                            <Slider Maximum="359" Margin="0 0 5 0" Minimum="0" Width="160" Value="{Binding ElementName=lbModels, Path=SelectedItem.ZRot, Mode=TwoWay}"/>
                            <TextBox Width="30" x:Name="tbZrot" >
                                <TextBox.Text>
                                    <Binding ElementName="lbModels" Path="SelectedItem.ZRot" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                        <Binding.ValidationRules>
                                            <validators:DegreesValidator/>
                                        </Binding.ValidationRules>
                                    </Binding>
                                </TextBox.Text>
                            </TextBox>
                        </StackPanel>
                        <Label VerticalAlignment="Bottom" Grid.Row="4" Content="Scale:" FontWeight="Bold" FontSize="12" Grid.ColumnSpan="2"></Label>
                        <StackPanel Grid.Row="5" Orientation="Horizontal" Grid.ColumnSpan="2">
                            <Label FontSize="10" VerticalAlignment="Center" Content="Value:"/>

                            <TextBox Width="32" Height="25" x:Name="tbScaleFactor">
                                <TextBox.Text>
                                    <Binding ElementName="lbModels" Path="SelectedItem.ScaleFactor"  Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" StringFormat="N1">
                                        <Binding.ValidationRules>
                                            <validators:ScaleFactorValidator/>
                                        </Binding.ValidationRules>
                                    </Binding>
                                </TextBox.Text>
                            </TextBox>
                        </StackPanel>

                    </Grid>
                </GroupBox>

                <GroupBox x:Name="gbSkeleton" Header="Skeleton">
                    <GroupBox.Style>
                        <Style TargetType="GroupBox" BasedOn="{StaticResource MetroGroupBox}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=lbModels, Path=SelectedIndex}" Value="-1">
                                    <Setter Property="IsEnabled" Value="False"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </GroupBox.Style>
                    <StackPanel Orientation="Vertical">
                        <RadioButton GroupName="SkeletonGroup" x:Name="rbHuman" Content="Human" Margin="5 10 0 0" IsChecked="{Binding ElementName=lbModels, Path=SelectedItem.Skeleton,  Converter={StaticResource EnumBooleanConverter}, ConverterParameter={x:Static local:Skeleton.Human}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

                        <RadioButton GroupName="SkeletonGroup" x:Name="rbQuad" Content="Quad" Margin="5 10 0 0" IsChecked="{Binding ElementName=lbModels, Path=SelectedItem.Skeleton,  Converter={StaticResource EnumBooleanConverter}, ConverterParameter={x:Static local:Skeleton.Quad}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                            <RadioButton.Style>
                                <Style TargetType="RadioButton" BasedOn="{StaticResource MetroRadioButton}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=rbNone, Path=IsChecked}" Value="False">
                                            <Setter Property="IsEnabled" Value="False"/>

                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </RadioButton.Style>
                        </RadioButton>

                        <RadioButton GroupName="SkeletonGroup" x:Name="rbHorse"  Content="Horse" Margin="5 10 0 0" IsChecked="{Binding ElementName=lbModels, Path=SelectedItem.Skeleton,  Converter={StaticResource EnumBooleanConverter}, ConverterParameter={x:Static local:Skeleton.Horse}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" >
                            <RadioButton.Style>
                                <Style TargetType="RadioButton" BasedOn="{StaticResource MetroRadioButton}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=rbNone, Path=IsChecked}" Value="False">
                                            <Setter Property="IsEnabled" Value="False"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </RadioButton.Style>
                        </RadioButton>

                        <RadioButton GroupName="SkeletonGroup" x:Name="rbCentaur"  Content="Centaur" Margin="5 10 0 0" IsChecked="{Binding ElementName=lbModels, Path=SelectedItem.Skeleton,  Converter={StaticResource EnumBooleanConverter}, ConverterParameter={x:Static local:Skeleton.Centaur}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" >
                            <RadioButton.Style>
                                <Style TargetType="RadioButton" BasedOn="{StaticResource MetroRadioButton}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=rbNone, Path=IsChecked}" Value="False">
                                            <Setter Property="IsEnabled" Value="False"/>

                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </RadioButton.Style>
                        </RadioButton>

                    </StackPanel>
                </GroupBox>
                <!--Motion is not supported-->
                <GroupBox x:Name="gbMotion" Header="Motion" IsEnabled="False">
                    <GroupBox.Style>
                        <Style TargetType="GroupBox" BasedOn="{StaticResource MetroGroupBox}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=lbModels, Path=SelectedIndex}" Value="-1">
                                    <Setter Property="IsEnabled" Value="False"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </GroupBox.Style>
                    <StackPanel Orientation="Vertical">
                        <RadioButton GroupName="MotionGroup" x:Name="rbNone" Content="None" Margin="5 10 0 0" IsChecked="{Binding ElementName=lbModels, Path=SelectedItem.Motion,  Converter={StaticResource EnumBooleanConverter}, ConverterParameter={x:Static local:Motion.None}}" />
                        <RadioButton GroupName="MotionGroup" x:Name="rbWalk" Content="Walk" Margin="5 10 0 0" IsChecked="{Binding ElementName=lbModels, Path=SelectedItem.Motion,  Converter={StaticResource EnumBooleanConverter}, ConverterParameter={x:Static local:Motion.Walk}}"/>
                        <RadioButton GroupName="MotionGroup" x:Name="rbJump" Content="Jump" Margin="5 10 0 0" IsChecked="{Binding ElementName=lbModels, Path=SelectedItem.Motion,  Converter={StaticResource EnumBooleanConverter}, ConverterParameter={x:Static local:Motion.Jump}}"/>
                        <RadioButton GroupName="MotionGroup" x:Name="rbRun" Content="Run" Margin="5 10 0 0" IsChecked="{Binding ElementName=lbModels, Path=SelectedItem.Motion,  Converter={StaticResource EnumBooleanConverter}, ConverterParameter={x:Static local:Motion.Run}}"/>
                    </StackPanel>
                </GroupBox>


            </StackPanel>

            <!--<Button Margin="10 0 0 0" Name="btnBrowse" Click="btnBrowse_Click" Height="25" Content="Browse" />-->
            <!--</StackPanel>-->
            <ListBox x:Name="lbModels" Margin="5" Grid.Row="1" HorizontalContentAlignment="Stretch" ItemsSource="{Binding RiggingModels}" SelectedItem="{Binding SelectedRiggingModel}">
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <DockPanel>
                            <Label DockPanel.Dock="Left"  ToolTip="{Binding Path=Path}">
                                <TextBlock Text="{Binding Path=Name}"/>
                            </Label>
                            <Button Width="30" DockPanel.Dock="Right" x:Name="btnRemove" Height="30" Style="{DynamicResource MetroCircleButtonStyle}" Click="btnRemove_Click" HorizontalAlignment="Right">
                                <Rectangle Width="10"  Height="10">
                                    <Rectangle.Fill>
                                        <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_close}" />
                                    </Rectangle.Fill>
                                </Rectangle>
                            </Button>
                        </DockPanel>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>

            <Button Grid.Row="2" Name="btnAutorig" Command="{Binding AutoRigCommand}" Content="Autorig" ToolTip="Start autorig process on selected scan"   Width="60" VerticalAlignment="Center" HorizontalAlignment="Center">
                <Button.Style>
                    <Style TargetType="Button" BasedOn="{StaticResource MetroButton}">
                        <Setter Property="IsEnabled" Value="False"/>
                        <Style.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=tbXrot}" Value="False"/>
                                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=tbYrot}" Value="False"/>
                                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=tbZrot}" Value="False"/>
                                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=tbScaleFactor}" Value="False"/>
                                    <!--<Condition Binding="{Binding Path=(Validation.HasError), ElementName=tbModelPath}" Value="False"/>-->

                                </MultiDataTrigger.Conditions>
                                <Setter Property="IsEnabled" Value="True"/>
                            </MultiDataTrigger>
                            <DataTrigger Binding="{Binding ElementName=lbModels, Path=SelectedIndex}" Value="-1">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>



            <Grid Grid.Column="1" Grid.Row="1" Grid.RowSpan="2">
                <controls:RiggingViewPort3D  x:Name="riggingModelViewPortControl" RiggingModel="{Binding Path=SelectedRiggingModel}" />
            </Grid>
            
        </Grid>

        <controls:ProgressControl x:Name="PbControl" HorizontalAlignment="Center" VerticalAlignment="Center" ProgressStatus="{Binding RiggingProgressStatus, Mode=OneWay}" ProgressValue="{Binding RiggingProgressValue, Mode=OneWay}" Visibility="{Binding ShowProgressBar, Mode=TwoWay, Converter={StaticResource BooleanToVisibilityConverter}}" CancelCommand="{Binding CancelCommand}" IsCancelEnabled="{Binding IsCancelEnabled, Mode=OneWay}"/>
            <!---->
    </Grid>
</Controls:MetroWindow>
